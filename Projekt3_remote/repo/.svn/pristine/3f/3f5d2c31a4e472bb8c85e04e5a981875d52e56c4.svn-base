<!DOCTYPE html>
<!--[if IE]><![endif]-->
<html>
  
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Class Element
   </title>
    <meta name="viewport" content="width=device-width">
    <meta name="title" content="Class Element
   ">
    <meta name="generator" content="docfx 2.41.0.0">
    
    <link rel="shortcut icon" href="../favicon.ico">
    <link rel="stylesheet" href="../styles/docfx.vendor.css">
    <link rel="stylesheet" href="../styles/docfx.css">
    <link rel="stylesheet" href="../styles/main.css">
    <meta property="docfx:navrel" content="../toc.html">
    <meta property="docfx:tocrel" content="toc.html">
    
    
    
  </head>
  <body data-spy="scroll" data-target="#affix" data-offset="120">
    <div id="wrapper">
      <header>
        
        <nav id="autocollapse" class="navbar navbar-inverse ng-scope" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              
              <a class="navbar-brand" href="../index.html">
                <img id="logo" class="svg" src="../logo.svg" alt="">
              </a>
            </div>
            <div class="collapse navbar-collapse" id="navbar">
              <form class="navbar-form navbar-right" role="search" id="search">
                <div class="form-group">
                  <input type="text" class="form-control" id="search-query" placeholder="Search" autocomplete="off">
                </div>
              </form>
            </div>
          </div>
        </nav>
        
        <div class="subnav navbar navbar-default">
          <div class="container hide-when-search" id="breadcrumb">
            <ul class="breadcrumb">
              <li></li>
            </ul>
          </div>
        </div>
      </header>
      <div role="main" class="container body-content hide-when-search">
        
        <div class="sidenav hide-when-search">
          <a class="btn toc-toggle collapse" data-toggle="collapse" href="#sidetoggle" aria-expanded="false" aria-controls="sidetoggle">Show / Hide Table of Contents</a>
          <div class="sidetoggle collapse" id="sidetoggle">
            <div id="sidetoc"></div>
          </div>
        </div>
        <div class="article row grid-right">
          <div class="col-md-10">
            <article class="content wrap" id="_content" data-uid="AngleSharp.Dom.Element">
  
  
  <h1 id="AngleSharp_Dom_Element" data-uid="AngleSharp.Dom.Element" class="text-break">Class Element
  </h1>
  <div class="markdown level0 summary"></div>
  <div class="markdown level0 conceptual"></div>
  <div class="inheritance">
    <h5>Inheritance</h5>
    <div class="level0"><span class="xref">System.Object</span></div>
    <div class="level1"><a class="xref" href="AngleSharp.Dom.EventTarget.html">EventTarget</a></div>
    <div class="level2"><a class="xref" href="AngleSharp.Dom.Node.html">Node</a></div>
    <div class="level3"><span class="xref">Element</span></div>
      <div class="level4"><a class="xref" href="AngleSharp.Html.Dom.HtmlElement.html">HtmlElement</a></div>
      <div class="level4"><a class="xref" href="AngleSharp.Mathml.Dom.MathElement.html">MathElement</a></div>
      <div class="level4"><a class="xref" href="AngleSharp.Svg.Dom.SvgElement.html">SvgElement</a></div>
  </div>
  <div classs="implements">
    <h5>Implements</h5>
    <div><span class="xref">System.IEquatable</span>&lt;<a class="xref" href="AngleSharp.Dom.INode.html">INode</a>&gt;</div>
    <div><a class="xref" href="AngleSharp.Dom.IElement.html">IElement</a></div>
    <div><a class="xref" href="AngleSharp.Dom.INode.html">INode</a></div>
    <div><a class="xref" href="AngleSharp.Dom.IEventTarget.html">IEventTarget</a></div>
    <div><a class="xref" href="AngleSharp.IMarkupFormattable.html">IMarkupFormattable</a></div>
    <div><a class="xref" href="AngleSharp.Dom.IParentNode.html">IParentNode</a></div>
    <div><a class="xref" href="AngleSharp.Dom.IChildNode.html">IChildNode</a></div>
    <div><a class="xref" href="AngleSharp.Dom.INonDocumentTypeChildNode.html">INonDocumentTypeChildNode</a></div>
  </div>
  <div class="inheritedMembers">
    <h5>Inherited Members</h5>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_AppendText_System_String_">Node.AppendText(String)</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_InsertText_System_Int32_System_String_">Node.InsertText(Int32, String)</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_InsertNode_System_Int32_AngleSharp_Dom_Node_">Node.InsertNode(Int32, Node)</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_AddNode_AngleSharp_Dom_Node_">Node.AddNode(Node)</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_RemoveNode_System_Int32_AngleSharp_Dom_Node_">Node.RemoveNode(Int32, Node)</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_AppendChild_AngleSharp_Dom_INode_">Node.AppendChild(INode)</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_InsertChild_System_Int32_AngleSharp_Dom_INode_">Node.InsertChild(Int32, INode)</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_InsertBefore_AngleSharp_Dom_INode_AngleSharp_Dom_INode_">Node.InsertBefore(INode, INode)</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_ReplaceChild_AngleSharp_Dom_INode_AngleSharp_Dom_INode_">Node.ReplaceChild(INode, INode)</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_RemoveChild_AngleSharp_Dom_INode_">Node.RemoveChild(INode)</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_Clone_System_Boolean_">Node.Clone(Boolean)</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_CompareDocumentPosition_AngleSharp_Dom_INode_">Node.CompareDocumentPosition(INode)</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_Contains_AngleSharp_Dom_INode_">Node.Contains(INode)</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_Normalize">Node.Normalize()</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_LookupNamespaceUri_System_String_">Node.LookupNamespaceUri(String)</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_LookupPrefix_System_String_">Node.LookupPrefix(String)</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_IsDefaultNamespace_System_String_">Node.IsDefaultNamespace(String)</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_GetPrefixAndLocalName_System_String_System_String__System_String__System_String__">Node.GetPrefixAndLocalName(String, String, String, String)</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_IsNamespaceError_System_String_System_String_System_String_">Node.IsNamespaceError(String, String, String)</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_NodeIsAdopted_AngleSharp_Dom_Document_">Node.NodeIsAdopted(Document)</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_NodeIsInserted_AngleSharp_Dom_Node_">Node.NodeIsInserted(Node)</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_NodeIsRemoved_AngleSharp_Dom_Node_AngleSharp_Dom_Node_">Node.NodeIsRemoved(Node, Node)</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_OnParentChanged">Node.OnParentChanged()</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_CloneNode_AngleSharp_Dom_Node_AngleSharp_Dom_Document_System_Boolean_">Node.CloneNode(Node, Document, Boolean)</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_HasChildNodes">Node.HasChildNodes</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_BaseUri">Node.BaseUri</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_BaseUrl">Node.BaseUrl</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_NodeType">Node.NodeType</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_NodeValue">Node.NodeValue</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_AngleSharp_Dom_INode_PreviousSibling">Node.INode.PreviousSibling</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_AngleSharp_Dom_INode_NextSibling">Node.INode.NextSibling</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_AngleSharp_Dom_INode_FirstChild">Node.INode.FirstChild</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_AngleSharp_Dom_INode_LastChild">Node.INode.LastChild</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_AngleSharp_Dom_INode_Owner">Node.INode.Owner</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_AngleSharp_Dom_INode_Parent">Node.INode.Parent</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_ParentElement">Node.ParentElement</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_AngleSharp_Dom_INode_ChildNodes">Node.INode.ChildNodes</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_NodeName">Node.NodeName</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.EventTarget.html#AngleSharp_Dom_EventTarget_AddEventListener_System_String_AngleSharp_Dom_DomEventHandler_System_Boolean_">EventTarget.AddEventListener(String, DomEventHandler, Boolean)</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.EventTarget.html#AngleSharp_Dom_EventTarget_RemoveEventListener_System_String_AngleSharp_Dom_DomEventHandler_System_Boolean_">EventTarget.RemoveEventListener(String, DomEventHandler, Boolean)</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.EventTarget.html#AngleSharp_Dom_EventTarget_RemoveEventListeners">EventTarget.RemoveEventListeners()</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.EventTarget.html#AngleSharp_Dom_EventTarget_InvokeEventListener_AngleSharp_Dom_Events_Event_">EventTarget.InvokeEventListener(Event)</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.EventTarget.html#AngleSharp_Dom_EventTarget_HasEventListener_System_String_">EventTarget.HasEventListener(String)</a>
    </div>
    <div>
      <a class="xref" href="AngleSharp.Dom.EventTarget.html#AngleSharp_Dom_EventTarget_Dispatch_AngleSharp_Dom_Events_Event_">EventTarget.Dispatch(Event)</a>
    </div>
  </div>
  <h6><strong>Namespace</strong>: <a class="xref" href="AngleSharp.Dom.html">AngleSharp.Dom</a></h6>
  <h6><strong>Assembly</strong>: AngleSharp.dll</h6>
  <h5 id="AngleSharp_Dom_Element_syntax">Syntax</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public abstract class Element : Node, IEquatable&lt;INode&gt;, IElement, INode, IEventTarget, IMarkupFormattable, IParentNode, IChildNode, INonDocumentTypeChildNode</code></pre>
  </div>
  <h3 id="constructors">Constructors
  </h3>
  
  
  <a id="AngleSharp_Dom_Element__ctor_" data-uid="AngleSharp.Dom.Element.#ctor*"></a>
  <h4 id="AngleSharp_Dom_Element__ctor_AngleSharp_Dom_Document_System_String_System_String_System_String_AngleSharp_Dom_NodeFlags_" data-uid="AngleSharp.Dom.Element.#ctor(AngleSharp.Dom.Document,System.String,System.String,System.String,AngleSharp.Dom.NodeFlags)">Element(Document, String, String, String, NodeFlags)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Element(Document owner, string localName, string prefix, string namespaceUri, NodeFlags flags)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.Document.html">Document</a></td>
        <td><span class="parametername">owner</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">localName</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">prefix</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">namespaceUri</span></td>
        <td></td>
      </tr>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.NodeFlags.html">NodeFlags</a></td>
        <td><span class="parametername">flags</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element__ctor_" data-uid="AngleSharp.Dom.Element.#ctor*"></a>
  <h4 id="AngleSharp_Dom_Element__ctor_AngleSharp_Dom_Document_System_String_System_String_System_String_System_String_AngleSharp_Dom_NodeFlags_" data-uid="AngleSharp.Dom.Element.#ctor(AngleSharp.Dom.Document,System.String,System.String,System.String,System.String,AngleSharp.Dom.NodeFlags)">Element(Document, String, String, String, String, NodeFlags)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public Element(Document owner, string name, string localName, string prefix, string namespaceUri, NodeFlags flags)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.Document.html">Document</a></td>
        <td><span class="parametername">owner</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">name</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">localName</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">prefix</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">namespaceUri</span></td>
        <td></td>
      </tr>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.NodeFlags.html">NodeFlags</a></td>
        <td><span class="parametername">flags</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h3 id="properties">Properties
  </h3>
  
  
  <a id="AngleSharp_Dom_Element_AssignedSlot_" data-uid="AngleSharp.Dom.Element.AssignedSlot*"></a>
  <h4 id="AngleSharp_Dom_Element_AssignedSlot" data-uid="AngleSharp.Dom.Element.AssignedSlot">AssignedSlot</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IElement AssignedSlot { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.IElement.html">IElement</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_ChildElementCount_" data-uid="AngleSharp.Dom.Element.ChildElementCount*"></a>
  <h4 id="AngleSharp_Dom_Element_ChildElementCount" data-uid="AngleSharp.Dom.Element.ChildElementCount">ChildElementCount</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public int ChildElementCount { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Int32</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_Children_" data-uid="AngleSharp.Dom.Element.Children*"></a>
  <h4 id="AngleSharp_Dom_Element_Children" data-uid="AngleSharp.Dom.Element.Children">Children</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IHtmlCollection&lt;IElement&gt; Children { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.IHtmlCollection-1.html">IHtmlCollection</a>&lt;<a class="xref" href="AngleSharp.Dom.IElement.html">IElement</a>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_ClassList_" data-uid="AngleSharp.Dom.Element.ClassList*"></a>
  <h4 id="AngleSharp_Dom_Element_ClassList" data-uid="AngleSharp.Dom.Element.ClassList">ClassList</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public ITokenList ClassList { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.ITokenList.html">ITokenList</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_ClassName_" data-uid="AngleSharp.Dom.Element.ClassName*"></a>
  <h4 id="AngleSharp_Dom_Element_ClassName" data-uid="AngleSharp.Dom.Element.ClassName">ClassName</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public string ClassName { get; set; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_FirstElementChild_" data-uid="AngleSharp.Dom.Element.FirstElementChild*"></a>
  <h4 id="AngleSharp_Dom_Element_FirstElementChild" data-uid="AngleSharp.Dom.Element.FirstElementChild">FirstElementChild</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IElement FirstElementChild { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.IElement.html">IElement</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_Id_" data-uid="AngleSharp.Dom.Element.Id*"></a>
  <h4 id="AngleSharp_Dom_Element_Id" data-uid="AngleSharp.Dom.Element.Id">Id</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public string Id { get; set; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_InnerHtml_" data-uid="AngleSharp.Dom.Element.InnerHtml*"></a>
  <h4 id="AngleSharp_Dom_Element_InnerHtml" data-uid="AngleSharp.Dom.Element.InnerHtml">InnerHtml</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public string InnerHtml { get; set; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_IsFocused_" data-uid="AngleSharp.Dom.Element.IsFocused*"></a>
  <h4 id="AngleSharp_Dom_Element_IsFocused" data-uid="AngleSharp.Dom.Element.IsFocused">IsFocused</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public bool IsFocused { get; protected set; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_LastElementChild_" data-uid="AngleSharp.Dom.Element.LastElementChild*"></a>
  <h4 id="AngleSharp_Dom_Element_LastElementChild" data-uid="AngleSharp.Dom.Element.LastElementChild">LastElementChild</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IElement LastElementChild { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.IElement.html">IElement</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_LocalName_" data-uid="AngleSharp.Dom.Element.LocalName*"></a>
  <h4 id="AngleSharp_Dom_Element_LocalName" data-uid="AngleSharp.Dom.Element.LocalName">LocalName</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public string LocalName { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_NamespaceUri_" data-uid="AngleSharp.Dom.Element.NamespaceUri*"></a>
  <h4 id="AngleSharp_Dom_Element_NamespaceUri" data-uid="AngleSharp.Dom.Element.NamespaceUri">NamespaceUri</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public string NamespaceUri { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_NextElementSibling_" data-uid="AngleSharp.Dom.Element.NextElementSibling*"></a>
  <h4 id="AngleSharp_Dom_Element_NextElementSibling" data-uid="AngleSharp.Dom.Element.NextElementSibling">NextElementSibling</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IElement NextElementSibling { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.IElement.html">IElement</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_OuterHtml_" data-uid="AngleSharp.Dom.Element.OuterHtml*"></a>
  <h4 id="AngleSharp_Dom_Element_OuterHtml" data-uid="AngleSharp.Dom.Element.OuterHtml">OuterHtml</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public string OuterHtml { get; set; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_Prefix_" data-uid="AngleSharp.Dom.Element.Prefix*"></a>
  <h4 id="AngleSharp_Dom_Element_Prefix" data-uid="AngleSharp.Dom.Element.Prefix">Prefix</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public string Prefix { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_PreviousElementSibling_" data-uid="AngleSharp.Dom.Element.PreviousElementSibling*"></a>
  <h4 id="AngleSharp_Dom_Element_PreviousElementSibling" data-uid="AngleSharp.Dom.Element.PreviousElementSibling">PreviousElementSibling</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IElement PreviousElementSibling { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.IElement.html">IElement</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_ShadowRoot_" data-uid="AngleSharp.Dom.Element.ShadowRoot*"></a>
  <h4 id="AngleSharp_Dom_Element_ShadowRoot" data-uid="AngleSharp.Dom.Element.ShadowRoot">ShadowRoot</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IShadowRoot ShadowRoot { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.IShadowRoot.html">IShadowRoot</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_Slot_" data-uid="AngleSharp.Dom.Element.Slot*"></a>
  <h4 id="AngleSharp_Dom_Element_Slot" data-uid="AngleSharp.Dom.Element.Slot">Slot</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public string Slot { get; set; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_TagName_" data-uid="AngleSharp.Dom.Element.TagName*"></a>
  <h4 id="AngleSharp_Dom_Element_TagName" data-uid="AngleSharp.Dom.Element.TagName">TagName</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public string TagName { get; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_TextContent_" data-uid="AngleSharp.Dom.Element.TextContent*"></a>
  <h4 id="AngleSharp_Dom_Element_TextContent" data-uid="AngleSharp.Dom.Element.TextContent">TextContent</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public override string TextContent { get; set; }</code></pre>
  </div>
  <h5 class="propertyValue">Property Value</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="overrides">Overrides</h5>
  <div><a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_TextContent">Node.TextContent</a></div>
  <h3 id="methods">Methods
  </h3>
  
  
  <a id="AngleSharp_Dom_Element_AddAttribute_" data-uid="AngleSharp.Dom.Element.AddAttribute*"></a>
  <h4 id="AngleSharp_Dom_Element_AddAttribute_AngleSharp_Dom_Attr_" data-uid="AngleSharp.Dom.Element.AddAttribute(AngleSharp.Dom.Attr)">AddAttribute(Attr)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public void AddAttribute(Attr attr)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.Attr.html">Attr</a></td>
        <td><span class="parametername">attr</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_After_" data-uid="AngleSharp.Dom.Element.After*"></a>
  <h4 id="AngleSharp_Dom_Element_After_AngleSharp_Dom_INode___" data-uid="AngleSharp.Dom.Element.After(AngleSharp.Dom.INode[])">After(INode[])</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public void After(params INode[] nodes)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.INode.html">INode</a>[]</td>
        <td><span class="parametername">nodes</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_Append_" data-uid="AngleSharp.Dom.Element.Append*"></a>
  <h4 id="AngleSharp_Dom_Element_Append_AngleSharp_Dom_INode___" data-uid="AngleSharp.Dom.Element.Append(AngleSharp.Dom.INode[])">Append(INode[])</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public void Append(params INode[] nodes)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.INode.html">INode</a>[]</td>
        <td><span class="parametername">nodes</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_AttachShadow_" data-uid="AngleSharp.Dom.Element.AttachShadow*"></a>
  <h4 id="AngleSharp_Dom_Element_AttachShadow_AngleSharp_Dom_ShadowRootMode_" data-uid="AngleSharp.Dom.Element.AttachShadow(AngleSharp.Dom.ShadowRootMode)">AttachShadow(ShadowRootMode)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IShadowRoot AttachShadow(ShadowRootMode mode)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.ShadowRootMode.html">ShadowRootMode</a></td>
        <td><span class="parametername">mode</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.IShadowRoot.html">IShadowRoot</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_Before_" data-uid="AngleSharp.Dom.Element.Before*"></a>
  <h4 id="AngleSharp_Dom_Element_Before_AngleSharp_Dom_INode___" data-uid="AngleSharp.Dom.Element.Before(AngleSharp.Dom.INode[])">Before(INode[])</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public void Before(params INode[] nodes)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.INode.html">INode</a>[]</td>
        <td><span class="parametername">nodes</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_Clone_" data-uid="AngleSharp.Dom.Element.Clone*"></a>
  <h4 id="AngleSharp_Dom_Element_Clone_AngleSharp_Dom_Document_System_Boolean_" data-uid="AngleSharp.Dom.Element.Clone(AngleSharp.Dom.Document,System.Boolean)">Clone(Document, Boolean)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public override Node Clone(Document owner, bool deep)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.Document.html">Document</a></td>
        <td><span class="parametername">owner</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">deep</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.Node.html">Node</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="overrides">Overrides</h5>
  <div><a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_Clone_AngleSharp_Dom_Document_System_Boolean_">Node.Clone(Document, Boolean)</a></div>
  
  
  <a id="AngleSharp_Dom_Element_CloneElement_" data-uid="AngleSharp.Dom.Element.CloneElement*"></a>
  <h4 id="AngleSharp_Dom_Element_CloneElement_AngleSharp_Dom_Element_AngleSharp_Dom_Document_System_Boolean_" data-uid="AngleSharp.Dom.Element.CloneElement(AngleSharp.Dom.Element,AngleSharp.Dom.Document,System.Boolean)">CloneElement(Element, Document, Boolean)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">protected void CloneElement(Element element, Document owner, bool deep)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.Element.html">Element</a></td>
        <td><span class="parametername">element</span></td>
        <td></td>
      </tr>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.Document.html">Document</a></td>
        <td><span class="parametername">owner</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td><span class="parametername">deep</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_Closest_" data-uid="AngleSharp.Dom.Element.Closest*"></a>
  <h4 id="AngleSharp_Dom_Element_Closest_System_String_" data-uid="AngleSharp.Dom.Element.Closest(System.String)">Closest(String)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IElement Closest(string selectorText)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">selectorText</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.IElement.html">IElement</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_Equals_" data-uid="AngleSharp.Dom.Element.Equals*"></a>
  <h4 id="AngleSharp_Dom_Element_Equals_AngleSharp_Dom_INode_" data-uid="AngleSharp.Dom.Element.Equals(AngleSharp.Dom.INode)">Equals(INode)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public override bool Equals(INode otherNode)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.INode.html">INode</a></td>
        <td><span class="parametername">otherNode</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="overrides">Overrides</h5>
  <div><a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_Equals_AngleSharp_Dom_INode_">Node.Equals(INode)</a></div>
  
  
  <a id="AngleSharp_Dom_Element_GetAttribute_" data-uid="AngleSharp.Dom.Element.GetAttribute*"></a>
  <h4 id="AngleSharp_Dom_Element_GetAttribute_System_String_" data-uid="AngleSharp.Dom.Element.GetAttribute(System.String)">GetAttribute(String)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public string GetAttribute(string name)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">name</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_GetAttribute_" data-uid="AngleSharp.Dom.Element.GetAttribute*"></a>
  <h4 id="AngleSharp_Dom_Element_GetAttribute_System_String_System_String_" data-uid="AngleSharp.Dom.Element.GetAttribute(System.String,System.String)">GetAttribute(String, String)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public string GetAttribute(string namespaceUri, string localName)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">namespaceUri</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">localName</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_GetElementsByClassName_" data-uid="AngleSharp.Dom.Element.GetElementsByClassName*"></a>
  <h4 id="AngleSharp_Dom_Element_GetElementsByClassName_System_String_" data-uid="AngleSharp.Dom.Element.GetElementsByClassName(System.String)">GetElementsByClassName(String)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IHtmlCollection&lt;IElement&gt; GetElementsByClassName(string classNames)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">classNames</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.IHtmlCollection-1.html">IHtmlCollection</a>&lt;<a class="xref" href="AngleSharp.Dom.IElement.html">IElement</a>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_GetElementsByTagName_" data-uid="AngleSharp.Dom.Element.GetElementsByTagName*"></a>
  <h4 id="AngleSharp_Dom_Element_GetElementsByTagName_System_String_" data-uid="AngleSharp.Dom.Element.GetElementsByTagName(System.String)">GetElementsByTagName(String)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IHtmlCollection&lt;IElement&gt; GetElementsByTagName(string tagName)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">tagName</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.IHtmlCollection-1.html">IHtmlCollection</a>&lt;<a class="xref" href="AngleSharp.Dom.IElement.html">IElement</a>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_GetElementsByTagNameNS_" data-uid="AngleSharp.Dom.Element.GetElementsByTagNameNS*"></a>
  <h4 id="AngleSharp_Dom_Element_GetElementsByTagNameNS_System_String_System_String_" data-uid="AngleSharp.Dom.Element.GetElementsByTagNameNS(System.String,System.String)">GetElementsByTagNameNS(String, String)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IHtmlCollection&lt;IElement&gt; GetElementsByTagNameNS(string namespaceURI, string tagName)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">namespaceURI</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">tagName</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.IHtmlCollection-1.html">IHtmlCollection</a>&lt;<a class="xref" href="AngleSharp.Dom.IElement.html">IElement</a>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_HasAttribute_" data-uid="AngleSharp.Dom.Element.HasAttribute*"></a>
  <h4 id="AngleSharp_Dom_Element_HasAttribute_System_String_" data-uid="AngleSharp.Dom.Element.HasAttribute(System.String)">HasAttribute(String)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public bool HasAttribute(string name)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">name</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_HasAttribute_" data-uid="AngleSharp.Dom.Element.HasAttribute*"></a>
  <h4 id="AngleSharp_Dom_Element_HasAttribute_System_String_System_String_" data-uid="AngleSharp.Dom.Element.HasAttribute(System.String,System.String)">HasAttribute(String, String)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public bool HasAttribute(string namespaceUri, string localName)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">namespaceUri</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">localName</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_Insert_" data-uid="AngleSharp.Dom.Element.Insert*"></a>
  <h4 id="AngleSharp_Dom_Element_Insert_AngleSharp_Dom_AdjacentPosition_System_String_" data-uid="AngleSharp.Dom.Element.Insert(AngleSharp.Dom.AdjacentPosition,System.String)">Insert(AdjacentPosition, String)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public void Insert(AdjacentPosition position, string html)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.AdjacentPosition.html">AdjacentPosition</a></td>
        <td><span class="parametername">position</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">html</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_LocateNamespace_" data-uid="AngleSharp.Dom.Element.LocateNamespace*"></a>
  <h4 id="AngleSharp_Dom_Element_LocateNamespace_System_String_" data-uid="AngleSharp.Dom.Element.LocateNamespace(System.String)">LocateNamespace(String)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">protected override sealed string LocateNamespace(string prefix)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">prefix</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="overrides">Overrides</h5>
  <div><a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_LocateNamespace_System_String_">Node.LocateNamespace(String)</a></div>
  
  
  <a id="AngleSharp_Dom_Element_LocatePrefix_" data-uid="AngleSharp.Dom.Element.LocatePrefix*"></a>
  <h4 id="AngleSharp_Dom_Element_LocatePrefix_System_String_" data-uid="AngleSharp.Dom.Element.LocatePrefix(System.String)">LocatePrefix(String)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">protected override sealed string LocatePrefix(string namespaceUri)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">namespaceUri</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="overrides">Overrides</h5>
  <div><a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_LocatePrefix_System_String_">Node.LocatePrefix(String)</a></div>
  
  
  <a id="AngleSharp_Dom_Element_Matches_" data-uid="AngleSharp.Dom.Element.Matches*"></a>
  <h4 id="AngleSharp_Dom_Element_Matches_System_String_" data-uid="AngleSharp.Dom.Element.Matches(System.String)">Matches(String)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public bool Matches(string selectorText)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">selectorText</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_Prepend_" data-uid="AngleSharp.Dom.Element.Prepend*"></a>
  <h4 id="AngleSharp_Dom_Element_Prepend_AngleSharp_Dom_INode___" data-uid="AngleSharp.Dom.Element.Prepend(AngleSharp.Dom.INode[])">Prepend(INode[])</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public void Prepend(params INode[] nodes)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.INode.html">INode</a>[]</td>
        <td><span class="parametername">nodes</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_QuerySelector_" data-uid="AngleSharp.Dom.Element.QuerySelector*"></a>
  <h4 id="AngleSharp_Dom_Element_QuerySelector_System_String_" data-uid="AngleSharp.Dom.Element.QuerySelector(System.String)">QuerySelector(String)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IElement QuerySelector(string selectors)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">selectors</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.IElement.html">IElement</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_QuerySelectorAll_" data-uid="AngleSharp.Dom.Element.QuerySelectorAll*"></a>
  <h4 id="AngleSharp_Dom_Element_QuerySelectorAll_System_String_" data-uid="AngleSharp.Dom.Element.QuerySelectorAll(System.String)">QuerySelectorAll(String)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public IHtmlCollection&lt;IElement&gt; QuerySelectorAll(string selectors)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">selectors</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.IHtmlCollection-1.html">IHtmlCollection</a>&lt;<a class="xref" href="AngleSharp.Dom.IElement.html">IElement</a>&gt;</td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_Remove_" data-uid="AngleSharp.Dom.Element.Remove*"></a>
  <h4 id="AngleSharp_Dom_Element_Remove" data-uid="AngleSharp.Dom.Element.Remove">Remove()</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public void Remove()</code></pre>
  </div>
  
  
  <a id="AngleSharp_Dom_Element_RemoveAttribute_" data-uid="AngleSharp.Dom.Element.RemoveAttribute*"></a>
  <h4 id="AngleSharp_Dom_Element_RemoveAttribute_System_String_" data-uid="AngleSharp.Dom.Element.RemoveAttribute(System.String)">RemoveAttribute(String)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public bool RemoveAttribute(string name)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">name</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_RemoveAttribute_" data-uid="AngleSharp.Dom.Element.RemoveAttribute*"></a>
  <h4 id="AngleSharp_Dom_Element_RemoveAttribute_System_String_System_String_" data-uid="AngleSharp.Dom.Element.RemoveAttribute(System.String,System.String)">RemoveAttribute(String, String)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public bool RemoveAttribute(string namespaceUri, string localName)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">namespaceUri</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">localName</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.Boolean</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_Replace_" data-uid="AngleSharp.Dom.Element.Replace*"></a>
  <h4 id="AngleSharp_Dom_Element_Replace_AngleSharp_Dom_INode___" data-uid="AngleSharp.Dom.Element.Replace(AngleSharp.Dom.INode[])">Replace(INode[])</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public void Replace(params INode[] nodes)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.INode.html">INode</a>[]</td>
        <td><span class="parametername">nodes</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_SetAttribute_" data-uid="AngleSharp.Dom.Element.SetAttribute*"></a>
  <h4 id="AngleSharp_Dom_Element_SetAttribute_System_String_System_String_" data-uid="AngleSharp.Dom.Element.SetAttribute(System.String,System.String)">SetAttribute(String, String)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public void SetAttribute(string name, string value)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">name</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">value</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_SetAttribute_" data-uid="AngleSharp.Dom.Element.SetAttribute*"></a>
  <h4 id="AngleSharp_Dom_Element_SetAttribute_System_String_System_String_System_String_" data-uid="AngleSharp.Dom.Element.SetAttribute(System.String,System.String,System.String)">SetAttribute(String, String, String)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public void SetAttribute(string namespaceUri, string name, string value)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">namespaceUri</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">name</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">value</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  
  
  <a id="AngleSharp_Dom_Element_ToHtml_" data-uid="AngleSharp.Dom.Element.ToHtml*"></a>
  <h4 id="AngleSharp_Dom_Element_ToHtml_System_IO_TextWriter_AngleSharp_IMarkupFormatter_" data-uid="AngleSharp.Dom.Element.ToHtml(System.IO.TextWriter,AngleSharp.IMarkupFormatter)">ToHtml(TextWriter, IMarkupFormatter)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">public override void ToHtml(TextWriter writer, IMarkupFormatter formatter)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.IO.TextWriter</span></td>
        <td><span class="parametername">writer</span></td>
        <td></td>
      </tr>
      <tr>
        <td><a class="xref" href="AngleSharp.IMarkupFormatter.html">IMarkupFormatter</a></td>
        <td><span class="parametername">formatter</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h5 class="overrides">Overrides</h5>
  <div><a class="xref" href="AngleSharp.Dom.Node.html#AngleSharp_Dom_Node_ToHtml_System_IO_TextWriter_AngleSharp_IMarkupFormatter_">Node.ToHtml(TextWriter, IMarkupFormatter)</a></div>
  
  
  <a id="AngleSharp_Dom_Element_UpdateAttribute_" data-uid="AngleSharp.Dom.Element.UpdateAttribute*"></a>
  <h4 id="AngleSharp_Dom_Element_UpdateAttribute_System_String_System_String_" data-uid="AngleSharp.Dom.Element.UpdateAttribute(System.String,System.String)">UpdateAttribute(String, String)</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">protected void UpdateAttribute(string name, string value)</code></pre>
  </div>
  <h5 class="parameters">Parameters</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">name</span></td>
        <td></td>
      </tr>
      <tr>
        <td><span class="xref">System.String</span></td>
        <td><span class="parametername">value</span></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h3 id="eii">Explicit Interface Implementations
  </h3>
  
  
  <a id="AngleSharp_Dom_Element_AngleSharp_Dom_IElement_Attributes_" data-uid="AngleSharp.Dom.Element.AngleSharp#Dom#IElement#Attributes*"></a>
  <h4 id="AngleSharp_Dom_Element_AngleSharp_Dom_IElement_Attributes" data-uid="AngleSharp.Dom.Element.AngleSharp#Dom#IElement#Attributes">IElement.Attributes</h4>
  <div class="markdown level1 summary"></div>
  <div class="markdown level1 conceptual"></div>
  <h5 class="decalaration">Declaration</h5>
  <div class="codewrapper">
    <pre><code class="lang-csharp hljs">INamedNodeMap IElement.Attributes { get; }</code></pre>
  </div>
  <h5 class="returns">Returns</h5>
  <table class="table table-bordered table-striped table-condensed">
    <thead>
      <tr>
        <th>Type</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a class="xref" href="AngleSharp.Dom.INamedNodeMap.html">INamedNodeMap</a></td>
        <td></td>
      </tr>
    </tbody>
  </table>
  <h3 id="implements">Implements</h3>
  <div>
      <span class="xref">System.IEquatable&lt;&gt;</span>
  </div>
  <div>
      <a class="xref" href="AngleSharp.Dom.IElement.html">IElement</a>
  </div>
  <div>
      <a class="xref" href="AngleSharp.Dom.INode.html">INode</a>
  </div>
  <div>
      <a class="xref" href="AngleSharp.Dom.IEventTarget.html">IEventTarget</a>
  </div>
  <div>
      <a class="xref" href="AngleSharp.IMarkupFormattable.html">IMarkupFormattable</a>
  </div>
  <div>
      <a class="xref" href="AngleSharp.Dom.IParentNode.html">IParentNode</a>
  </div>
  <div>
      <a class="xref" href="AngleSharp.Dom.IChildNode.html">IChildNode</a>
  </div>
  <div>
      <a class="xref" href="AngleSharp.Dom.INonDocumentTypeChildNode.html">INonDocumentTypeChildNode</a>
  </div>
  <h3 id="extensionmethods">Extension Methods</h3>
  <div>
      <a class="xref" href="AngleSharp.Common.ObjectExtensions.html#AngleSharp_Common_ObjectExtensions_ToDictionary_System_Object_">ObjectExtensions.ToDictionary(Object)</a>
  </div>
</article>
          </div>
          
          <div class="hidden-sm col-md-2" role="complementary">
            <div class="sideaffix">
              <div class="contribution">
                <ul class="nav">
                </ul>
              </div>
              <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm affix" id="affix">
              <!-- <p><a class="back-to-top" href="#top">Back to top</a><p> -->
              </nav>
            </div>
          </div>
        </div>
      </div>
      
      <footer>
        <div class="grad-bottom"></div>
        <div class="footer">
          <div class="container">
            <span class="pull-right">
              <a href="#top">Back to top</a>
            </span>
            
            <span>Generated by <strong>DocFX</strong></span>
          </div>
        </div>
      </footer>
    </div>
    
    <script type="text/javascript" src="../styles/docfx.vendor.js"></script>
    <script type="text/javascript" src="../styles/docfx.js"></script>
    <script type="text/javascript" src="../styles/main.js"></script>
  </body>
</html>
